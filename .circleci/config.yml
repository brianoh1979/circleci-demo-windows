version: 2.1

#Comment

orbs:
  win: circleci/windows@1.0.0
  git-shallow-clone: guitarrapc/git-shallow-clone@2.4.0

jobs:
  build:
    machine: true
    resource_class: brianoh1979/brian-winrunner
    steps:
      - run:
         command: powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
         shell: powershell.exe
      - run:
          name: Install gh-cli
          command: |
            choco install gh #https://github.com/cli/cli#windows
          shell: powershell.exe
      - run:
          name: Authenticate gh and clone
          command: |
            # Authenticate
            echo "Authenticating GH CLI"
            gh auth setup-git --hostname "github.com"
            gh auth status

            # Configure
            echo "Disabling interactive prompts for GH CLI"
            gh config set prompt disabled

            gh repo clone brianoh1979/circleci-demo-macos .
          shell: powershell.exe
      - run: systeminfo
      - run: ls
      - run: cd "C:\Users\circleci.EC2AMAZ-H1LB92J"; ./git-shallow-clone.sh
      - run:
          command: |
              #!/bin/sh
              set -ex
              # Workaround old docker images with incorrect $HOME
              # check https://github.com/docker/docker/issues/2968 for details
              if [ "${HOME}" = "/" ]
              then
                export HOME=$(getent passwd $(id -un) | cut -d: -f6)
              fi

              # known_hosts
              "C:\Windows\system32\cmd.exe" /c mkdir -p ~/.ssh
              if [ -x "$(command -v ssh-keyscan)" ] && ([ "${keyscan_github}" == "true" ] || [ "${keyscan_bitbucket}" == "true" ])
              then
                if [ "${keyscan_github}" == "true" ]
                then
                  ssh-keyscan -H github.com >> ~/.ssh/known_hosts
                fi
                if [ "${keyscan_bitbucket}" == "true" ]
                then
                  ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts
                fi
              fi
              if [ "${keyscan_github}" != "true" ]
              then
                echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
              ' >> ~/.ssh/known_hosts
              fi
              if [ "${keyscan_bitbucket}" != "true" ]
              then
                echo 'bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
              ' >> ~/.ssh/known_hosts
              fi

              (umask 077; touch ~/.ssh/id_rsa)
              chmod 0600 ~/.ssh/id_rsa
              (echo $CHECKOUT_KEY > ~/.ssh/id_rsa)

              # use git+ssh instead of https
              git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
              git config --global gc.auto 0 || true

              # checkout
              git clone --depth ${depth} $CIRCLE_REPOSITORY_URL "${path}"
              cd "${path}"

              # Define Tag Fetch args
              if [ -n "$CIRCLE_TAG" ]
              then
                # only tags operation have default --tags. others will no tag options
                tag_args="--tags"
              fi
              if [ '${no_tags}' == 'true' ]
              then
                tag_args="--no-tags"
              fi

              # Fetch remote and check the commit ID of the checked out code
              if [ -n "$CIRCLE_TAG" ]
              then
                # tag
                git fetch ${tag_args} --depth ${fetch_depth} --force origin "+refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}"
              elif [[ $(echo $CIRCLE_BRANCH | grep -E ^pull\/[0-9]+$) ]] # sh version of bash `elif [[ "$CIRCLE_BRANCH" =~ ^pull\/[0-9]+$  ]]`
              then
                # pull request
                git fetch ${tag_args} --depth ${fetch_depth} --force origin "${CIRCLE_BRANCH}/head:remotes/origin/${CIRCLE_BRANCH}"
              else
                # others
                git fetch ${tag_args} --depth=${fetch_depth} --force origin "$CIRCLE_BRANCH:remotes/origin/$CIRCLE_BRANCH"
               fi

               # Check the commit ID of the checked out code
               if [ -n "$CIRCLE_TAG" ]
               then
                 git reset --hard "$CIRCLE_SHA1"
                 git checkout -q "$CIRCLE_TAG"
               elif [ -n "$CIRCLE_BRANCH" ] && [ "$CIRCLE_BRANCH" != 'HEAD' ]
               then
                 git reset --hard "$CIRCLE_SHA1"
                 git checkout -q -B "$CIRCLE_BRANCH"
               fi

               git reset --hard "$CIRCLE_SHA1"
          shell: bash.exe
      - run: 
         command: $env:brian
         shell: powershell.exe
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "circleci-demo-windows.csproj" }}
      - run:
          name: "Install project dependencies"
          command: dotnet.exe restore
      - save_cache:
          paths:
            - C:\Users\circleci\.nuget\packages
          key: dotnet-packages-v1-{{ checksum "circleci-demo-windows.csproj" }}

      - run:
          name: "Run Build step"
          command: dotnet.exe publish -c Release -r win10-x64
      - run:
          name: "Test the executable"
          command: .\bin\Release\netcoreapp2.1\win10-x64\publish\circleci-demo-windows.exe
      - store_artifacts:
          path: .\bin\Release\netcoreapp2.1\win10-x64\publish\circleci-demo-windows.exe
